const game = {};

// VARIABLES
game.gameState = false;
game.players = players;
game.questions = [];
game.currentQuestion = [];
game.questionCount = players.length;
game.questionsAnswered = 0;
game.correctAnswers = 0;

// METHODS
game.init = function() {
  // populate the question in the game container
  console.log("populating questions");
  game.populateQuestions();
}
game.startGame = function() {
  
  // fetch the next question
  game.getNextQuestion();
  console.log("Displaying next question");
  game.displayQuestion();
  
  console.log('game started');
  gameState = true;
}

game.getRandomIdx = function(array) {
  const idx = Math.floor(Math.random() * array.length);
  return idx;
}


game.getRandomNames = function(notIdx) {
  // make a copy of the players array
  const players = game.players.slice();
  
  // remove the players name from the copy of the players array and store it for later
  const removedName = players.splice(notIdx, 1)[0].name;
  
  // create an array to hold the player names
  const playerNames = [];
  
  for (let i = 0; i < 3; i++) {
    // get a random index of the functions players array
    const randomIdx = game.getRandomIdx(players);
    // push name of player at the random index of the players array
    playerNames.push(players[randomIdx].name);
    // remove that name from the players array
    players.splice(randomIdx, 1);
  }

  // get random index of the array + placeholder (3 names + [''] <= to get 4 index options)
  const randomIdx = game.getRandomIdx(playerNames.concat(['']));

  // add in player's name that was removed in random location in array
  playerNames.splice(randomIdx, 0, removedName);
  
  // return the 3 randomly selected names + player's actual name in random order
  return playerNames; 
}

game.populateQuestions = function() {
  // make a copy of the players array
  const questions = game.players.slice();

  questions.forEach(function(question, idx) {
    // for each player object, create new gameNames property
    // add the player's name and 3 random player's names to be guessed
    // question.gameNames = [question.name].concat(game.getRandomNames(idx));
    question.gameNames = game.getRandomNames(idx);
  })

  // set the game.questions property to the questions generated by this function
  game.questions = questions;
}

game.displayQuestion = function() {
  const question = game.currentQuestion;
  // Display player's image
  $('.game__playerImg').attr('src', question.imgSrc).attr('alt', 'Image of Toronto Raptors player to be guessed');

  // Display question count
  $('.game__questionNumber').text(`${game.questionsAnswered + 1} / ${game.questionCount}`);
  
  // Display name options
  $('.game__form label').each(function(idx) {
    const playerName = question.gameNames[idx];
    const labelFor = $(this).attr('for');
    
    // Set label text to playerName
    $(this).text(playerName);

    // Set input value to playerName
    $(`#${labelFor}`).attr('value', playerName);

    $('.game__form button').attr('disabled', 'disabled');
  })
}

game.getNextQuestion = function() {
  const randomIdx = game.getRandomIdx(game.questions);

  game.currentQuestion = game.questions.splice(randomIdx, 1)[0];
}

game.displayResults = function() {
  // Set game state to off (false)
  gameState = false;

  // store .game__container div as a variable for use later
  const gameContainer = $('.game__container');

  const resultString = 
        `
        <h2>Game Finished!</h2>
        <p class="game__result">
        You got ${game.correctAnswers} / ${game.questionCount} correct!
        </p>
        `;
  
  // empty DOM elements in the gameContainer
  gameContainer.empty();

  // append the resultString in the gameContainer
  gameContainer.append(resultString);

}

// EVENT LISTENERS
game.handleStart = $('.game__button').on('click', game.startGame);

game.userAnwsers = $('.game__form input[name="player"]').on('change', function() {
  $('.game__form button').prop('disabled', '')
});

game.handleSubmit = $('.game__form').on('submit', function(evt) {
  evt.preventDefault();

  // Get value of the selected answer
  const userAnswer = $('.game__form input[name="player"]:checked').val();
  
  // If userAnswer has a value and its value is not "on"
  if (userAnswer && userAnswer !== "on") {
    console.log('user answer:', userAnswer);
    console.log('correct answer: ', game.currentQuestion.name)
    userAnswer === game.currentQuestion.name && game.correctAnswers++;
    console.log('next question')
    
    // Remove checked property of selected answer
    $('.game__form input[name="player"]:checked').prop("checked", false);
    
    // Increment questionsAnswered counter
    game.questionsAnswered++;

    // check if the amount of questions answered is the amount of questions in the game 
    if (game.questionsAnswered === game.questionCount) {
      console.log("game finished!")
  
      // if all the questions have been answered, display the results
      game.displayResults()
      
    } else {
      // Get next question
      game.getNextQuestion();
      // Display the next question
      game.displayQuestion();
    }


  }
  //  else {
  //   console.log('question must be answered to move forward')
  // }
});

// DOCUMENT READY
$(function() {
  console.log("document ready");
  game.init();
  
});